When would you want to use a remote repository rather than keeping all your work
local?

    - when using the repository from different devices and locations
    - when using the repository for sharing and colaborating code (or other files)
    with other people

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    There might be changes in the remote repository that i don't want to have
	in my local repository (yet).

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks only exist on GitHub. They are like clones done on the servers of GitHub
	for cloning other peoples repositories into the own account.
	Clone is the general concept of copying a repository, whether it is a remote
	repository cloned to your local machine or a local repository being cloned on
	the local machine.
	Branches don't clone or fork anything, they just "branch" off a shared parent
	or root element and further on have their own history (git log) until they may
	be merged with another branch again.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    The benefit is that you're holding a mutual root that both, the remote and the
	local versions have in common. When now pulling from the remote repository, 
	it's easy to just update the copy of the last known state of the remote with
	all the changes, using a fast-forward-merge. Then is up to date remote version
	only needs to be merged with the current local branch which contains commits
	which haven't been synced with the remote repository yet. Afterwards everything
	can be pushed back to the remote repository, so that now both repositories are
	up-to-date.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Use a shared drive, write changes directly into the files. There might be a lot
	of conflicts when multiple people want to make changes. Changes might get lost,
	if somebody makes a local copy and makes local changes there. During this time,
	another person makes changes on the shared documents. Then, the other persone
	exchanges hos local copy of a document with the shared document. At this time,
	changes that have been made in the shared document get lost. 
	Advantages: quicker changes possible without making pull requests. 

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
