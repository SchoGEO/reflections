What happens when you initialize a repository? Why do you need to do it?

	A new (private) .git folder is created, containing important meta data. Here,
	the status of the git-repository, future commits, changes and all other meta
	data will be saved.
	
How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is a virtual area where files can be added that should go into
	one commit. Usually the files for one commit should be logically connected. The 
	working directory contains all files, no matter if they are going to be in the 
	next commit or not. The repository has the "knowledge" of all changes being made.

How can you use the staging area to make sure you have one commit per logical
change?

	Compare content of staging area to both, working directory and most recent commit
	in repository to see if changes in staging area only lead to one logical change.
	If not, files added to staging area can be reverted with command git reset --hard.
	Need to be very careful with this command.
	compare working directory with staging area:	git diff
	compare staging area with most recent commit:	git diff --staged

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Situations might be when planning to develop a project into two (or more) different 
	directions (experimental), not knowing yet which one of those will be the direction
	to follow on further. Each possible of the different development directions becomes
	a new branch with it's own name. After having decided which direction to follow, 
	branches can be merged with the original master branch again.

How do the diagrams help you visualize the branch structure?

	The diagrams can visualize the branch structure like a "tree", keeping an overview.
	You can see at which point, branches branched out from the master branch and the a 
	history which shows which commits the different branches have in common and which 
	commits only exist on one of the branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result is a new commit, having both of the old branches as parrents. That means,
	both parrent (an by that both branch pathes) can be reached from the new merged branch.
	That is why whe represent it in the diagram the way we do.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	automatic merging can save a lot of work because you don't need to view and compare 
	every change. This only works for independent parts of the document. If changes were
	made to same parts of a document, these areas have to be reviewed by the authors in
	order to decide which changes should go into the merged version and which changes to
	discard. Doing everything manually can quickly become very time consuming, especially
	when operating on large documents.
